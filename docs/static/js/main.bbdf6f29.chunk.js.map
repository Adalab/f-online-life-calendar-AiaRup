{"version":3,"sources":["components/Smiley/index.js","components/utils/dateFunctions.js","components/Calendar/index.js","components/Editor/index.js","components/MoodPage/index.js","components/App/index.js","components/utils/localStorage.js","index.js"],"names":["Smiley","_ref","mood","react_default","a","createElement","className","concat","sortDate","firstDate","secondDate","Date","date","Calendar","moods","react_router_dom","to","sort","map","day","key","title","Editor","changeInputValue","currentMood","initialNewMood","message","onSubmitNewMood","errorMessage","htmlFor","type","id","name","max","toJSON","slice","replace","placeholder","onChange","value","checked","onClick","MoodPage","smiley","find","moodItem","react","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","property","target","console","log","setState","prevState","_objectSpread2","newMood","objectSpread","defineProperty","state","bind","assertThisInitialized","storage","setItem","removeItem","event","isSupported","window","localStorage","storageData","JSON","parse","getItem","_this2","isNaN","isDate","preventDefault","givenDate","currentDate","isDateBeforeToday","_this$state","filter","length","toConsumableArray","stringify","_this3","_this$state2","_this$state2$newMood","react_router","exact","path","render","routerProps","match","params","from","Component","ReactDOM","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.bbdf6f29.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.scss';\n\nexport default function Smiley({ mood }) {\n  return (\n    <div className={`mood__face ${mood}`}>\n      <div className=\"face__eyes\">:</div>\n      <div className=\"face__mouth\">)</div>\n    </div>\n  );\n}\n","const isDateBeforeToday = givenDate => {\n  const currentDate = new Date();\n  givenDate = new Date(givenDate);\n  return givenDate > currentDate;\n};\n\nexport { isDateBeforeToday };\n\nconst isDate = date => {\n  return new Date(date) !== 'Invalid Date' && !isNaN(new Date(date));\n};\n\nexport { isDate };\n\nconst sortDate = (firstDate, secondDate) => {\n  const dateA = new Date(firstDate.date);\n  const dateB = new Date(secondDate.date);\n  return dateA - dateB;\n};\n\nexport { sortDate };\n","import React from 'react';\nimport './styles.scss';\nimport Smiley from '../Smiley';\nimport { Link } from 'react-router-dom';\nimport { sortDate } from '../utils/dateFunctions';\n\nexport default function Calendar({ moods }) {\n  // const sortedMoods = moods.sort(sortDate);\n  return (\n    <div className=\"page__calendar\">\n      <Link to=\"/editor\" className=\"calendar__plus-button\">\n        +\n      </Link>\n      <ol className=\"mood__list\">\n        {moods.sort(sortDate).map(day => {\n          return (\n            <li className=\"mood__item\" key={day.date} title={day.date}>\n              <Link to={`/mood/${day.date}`} className=\"mood__link\">\n                <Smiley mood={day.mood} />\n              </Link>\n            </li>\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\n","import React from 'react';\nimport './styles.scss';\nimport Smiley from '../Smiley';\nimport { Link } from 'react-router-dom';\n\nexport default function Editor({ changeInputValue, currentMood, initialNewMood, message, onSubmitNewMood, errorMessage }) {\n  return (\n    <div className=\"page__editor\">\n      <form>\n        <fieldset className=\"editor__fieldset\">\n          <legend className=\"editor__legent\">date</legend>\n          <div>\n            <label htmlFor=\"date\" className=\"editor__label\">\n              date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"mood__date\"\n              max={new Date()\n                .toJSON()\n                .slice(0, 10)\n                .replace('/', '-')}\n              className=\"editor__input\"\n              placeholder=\"&#xf133;\"\n              onChange={changeInputValue('date')}\n            />\n          </div>\n        </fieldset>\n        <fieldset className=\"editor__fieldset\">\n          <legend className=\"editor__legent\">mood</legend>\n          <div className=\"form__mood-container\">\n            <div className=\"radio__mood\">\n              <label htmlFor=\"good\" className=\"label__mood\">\n                <input id=\"good\" type=\"radio\" value=\"good\" name=\"mood\" onChange={changeInputValue('mood')} checked={currentMood === 'good'} />\n                <Smiley mood=\"good\" />\n              </label>\n            </div>\n            <div className=\"radio__mood\">\n              <label htmlFor=\"bad\" className=\"label__mood\">\n                <input id=\"bad\" type=\"radio\" value=\"bad\" name=\"mood\" onChange={changeInputValue('mood')} checked={currentMood === 'bad'} />\n                <Smiley mood=\"bad\" />\n              </label>\n            </div>\n          </div>\n        </fieldset>\n\n        {currentMood === 'good' ? (\n          <fieldset className=\"editor__fieldset\">\n            <legend className=\"editor__legent\">message</legend>\n            <div>\n              <label htmlFor=\"message\" className=\"editor__label\">\n                message\n              </label>\n              <input id=\"message\" type=\"text\" name=\"message\" placeholder=\"Why are you in a good mood?\" className=\"editor__input\" value={message} onChange={changeInputValue('message')} />\n            </div>\n          </fieldset>\n        ) : null}\n        <fieldset className=\"editor__fieldset buttons\">\n          <Link to=\"/calendar\" className=\"form__button submit__button\" onClick={onSubmitNewMood}>\n            save\n          </Link>\n          <Link to=\"/calendar\" className=\"form__button cancel__button\" onClick={initialNewMood}>\n            cancel\n          </Link>\n        </fieldset>\n      </form>\n      {errorMessage ? <p className=\"form__error\">{errorMessage}</p> : null}\n    </div>\n  );\n}\n","import React, { Fragment } from 'react';\nimport './styles.scss';\nimport Smiley from '../Smiley';\nimport { Link } from 'react-router-dom';\n\nexport default function MoodPage({ date, moods }) {\n  const smiley = moods.find(moodItem => moodItem.date === date);\n\n  return (\n    <div className=\"mood__page\">\n      <Link to=\"/calendar\" className=\"mood__page-back\">\n        back\n      </Link>\n      {smiley ? (\n        <Fragment>\n          <Smiley mood={smiley.mood} />\n          <div className=\"mood__page-message\">{smiley.message}</div>\n          <div className=\"smiley__date\">{date}</div>\n        </Fragment>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './styles.scss';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Calendar from '../Calendar';\nimport Editor from '../Editor';\nimport MoodPage from '../MoodPage';\nimport { isSupported } from '../utils/localStorage';\nimport { isDate } from '../utils/dateFunctions';\nimport { isDateBeforeToday } from '../utils/dateFunctions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      moods: [],\n      newMood: { mood: 'good', message: '', date: '' },\n      errorMessage: ''\n    };\n    this.onSubmitNewMood = this.onSubmitNewMood.bind(this);\n    this.initialNewMood = this.initialNewMood.bind(this);\n  }\n\n  componentDidMount() {\n    if (isSupported(window.localStorage)) {\n      const storageData = JSON.parse(localStorage.getItem('moods'));\n      if (storageData) {\n        this.setState({ moods: storageData });\n      }\n    }\n  }\n\n  changeInputValue = property => ({ target: { value } }) => {\n    console.log('value', value);\n\n    this.setState(prevState => {\n      if (property === 'mood' && value === 'bad') {\n        return { newMood: { ...prevState.newMood, [property]: value, message: '' } };\n      }\n      return { newMood: { ...prevState.newMood, [property]: value } };\n    });\n  };\n\n  initialNewMood() {\n    this.setState({ newMood: { mood: 'good', message: '', date: '' }, errorMessage: '' });\n  }\n\n  onSubmitNewMood(event) {\n    const { date } = this.state.newMood;\n    if (!isDate(date) || !date) {\n      event.preventDefault();\n      this.setState({ errorMessage: 'You need to provide a valid date.' });\n      return;\n    }\n    if (isDateBeforeToday(date)) {\n      event.preventDefault();\n      this.setState({ errorMessage: \"You need to provide a date from the past or today's date.\" });\n      return;\n    }\n    const { newMood, moods } = this.state;\n    if (moods.filter(mood => mood.date === newMood.date).length > 0) {\n      event.preventDefault();\n      this.setState({ errorMessage: 'You already provided your mood for the selected date, you can not change it.' });\n      return;\n    }\n    this.setState({ moods: [...moods, newMood] }, () => {\n      localStorage.setItem('moods', JSON.stringify(this.state.moods));\n      this.initialNewMood();\n    });\n  }\n\n  render() {\n    const {\n      moods,\n      newMood: { mood, message, date },\n      errorMessage\n    } = this.state;\n    return (\n      <div className=\"page\">\n        <Switch>\n          <Route exact path=\"/calendar\" render={() => <Calendar moods={moods} />} />\n          <Route path=\"/editor\" render={() => <Editor currentMood={mood} changeInputValue={this.changeInputValue} initialNewMood={this.initialNewMood} message={message} onSubmitNewMood={this.onSubmitNewMood} date={date} errorMessage={errorMessage} />} />\n          <Route path=\"/mood/:id\" render={routerProps => <MoodPage date={routerProps.match.params.id} moods={moods} />} />\n          <Redirect from=\"/\" to=\"/editor\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","function isSupported(storage) {\n  try {\n    const key = 'test';\n    storage.setItem(key, key);\n    storage.removeItem(key);\n    return true;\n  } catch (event) {\n    return false;\n  }\n}\n\nexport { isSupported };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}